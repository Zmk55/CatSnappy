// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  handle        String    @unique
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  bio           String?   @db.Text
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  votes         Vote[]
  reports       Report[]
  reactions     Reaction[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id            String   @id @default(cuid())
  authorId      String
  author        User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  caption       String?  @db.Text
  imageKey      String   // S3 key
  imageUrl      String   // CDN URL
  blurhash      String?
  isNsfw        Boolean  @default(false)
  isReported    Boolean  @default(false)
  tags          Tag[]    @relation("PostTags")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  comments      Comment[]
  likes         Like[]
  votes         Vote[]
  reports       Report[]
  reactions     Reaction[]
  // derived metrics materialized nightly for ranking
  score         Int      @default(0)
}

model Comment {
  id        String   @id @default(cuid())
  postId    String
  authorId  String
  body      String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Like {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId]) // one like per user/post
}

enum VoteType {
  UP
  DOWN
}

model Vote {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  type      VoteType
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId]) // like/dislike toggle
}

model Tag {
  id     String @id @default(cuid())
  name   String @unique
  posts  Post[] @relation("PostTags")
}

model Report {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  reason    String   @db.Text
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId]) // one report per user/post
}

model Reaction {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  emoji     String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId, emoji]) // one reaction per user/post/emoji
}
